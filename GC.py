import socket
import sys
import threading
import hashlib
import getopt
import subprocess

def uso():
    print("")
    print("Comandos:")
    print("")
    print('-h, --help     : help')
    print("-l, --listen   : escutar")
    print("-p, --porta    : definir porta")
    print("-i, --ip       : IP do alvo/ seu IP se for no modo listen")
    print("-r, --recive   : receber um arquivo")
    print("-e, --execute  : executa um cmd")
    print("-f, --file     : envia um arquivo")
    print("")
    print(f"EX: python {__file__} -l -p 8080")
    print(f"EX: python {__file__} -t 127.0.0.1 -p 80")
    print(f"EX: python {__file__} -l -e")
    print(f"EX: python {__file__} -t 127.0.0.1 -f teste.txt")
    print("")

def cal_md5(file):
    with open(file,'rb') as f:
        data = f.read()
        md5_return = hashlib.md5(data).hexdigest()
    return md5_return

def shell_command(command):
    command = command.rstrip()
    try:output = subprocess.run(command,shell=True,capture_output=True,text=True).stdout
    except:output = "ERRO\nComando invalido"
    return output.strip()

class socket_():
    @property
    def host(self):
        return self._host

    @host.setter
    def host(self, host):
        try:
            self._host = host
        except Exception as e:
            print(e,"\nIp/Host inválido")
            
    @property
    def port(self):
        return int(self._port)

    @port.setter
    def port(self,port):
        try:
            port = int(port)
            if port >= 65535 or port < 0:
                raise Exception
            self._port = int(port)
        except Exception as e:
            print(e,"\nPorta inválida")
    
    def __init__(self,host,port):
        try:
            self._host = host
            self._port = int(port)
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        except Exception as e:
            print(e,"\nAlgo deu errado")

    def connect_to_target(self):
        try:
            self.sock.connect((self._host,self._port))
            print(f"Conectado ao {self._host} na porta {self._port}")
            handle_msg = threading.Thread(target=self.recv_msg,args=(self.sock,))
            handle_msg.start()
            while True:
                msg = input("")
                self.send_msg(msg,self.sock)

        except Exception as e: 
            print(e,"\nErro de conexão")

        finally:
            self.sock.close()

    def send_msg(self,msg,sock):
        try:
            sock.sendall(msg.encode())
        except Exception as e:
            print(e,'\nErro ao enviar mensagem')

    def recv_msg(self,sock):
        try:
            while True:
                msg = sock.recv(4096).decode().strip()
                print(msg)
        except Exception as e:
            print(e,"Erro ao receber a mensagem")

    def start_listen(self):
        try:
            self.sock.bind((self._host,self._port))
            print(f"Escutando na porta {self._port}")
            self.sock.listen(1)
            while True:
                client_sock, client_addr = self.sock.accept()
                thread_listen = threading.Thread(target=self.recv_msg,args=(client_sock,))
                thread_listen.start()
                while True:
                    msg = input("")
                    self.send_msg(msg,client_sock)
        except Exception as e:
            print(e,"Erro ao criar escuta")

    def send_file(self,file):
        self.sock.bind((self._host,self._port))
        self.sock.listen(1)
        client_sock, client_addr = self.sock.accept()
        md5 = cal_md5(file)
        self.send_msg(md5,client_sock)
        with open(file,'rb') as f:
            compressed_file = f.read()
        
        client_sock.sendall(compressed_file)
        recv = client_sock.recv(4096)

        if "OK" in recv.decode().strip():
            print("arquivo enviado!")
        else:
            print("Erro ao enviar arquivo")

    def recv_file(self):
        self.sock.connect((self._host,self._port))
        md5_origim = self.sock.recv(4096)
        file_buffer  = self.sock.recv(1024)        
        try:
            arquivo = input("Nome do arquivo: ")
            save_file = open(arquivo,'wb')
            save_file.write(file_buffer)
            save_file.close()
            self.sock.send("OK".encode())
            print("salvo com sucesso")
        except:print("Erro ao salvar")

    def execute_command(self):
        self.sock.bind((self._host,self._port))   
        self.sock.listen(1)
        client_sock, client_addr = self.sock.accept()
        while True:
            command = client_sock.recv(1024)
            response = shell_command(command.decode())
            client_sock.sendall((response+'\n').encode())
    
def main(): 
    try:
        host = 'localhost'
        port = '4444'
        listen_mod = False
        send_file = False
        _exit = False
        recive_file = False
        execute_command = False
        file_to_send = None
        opts, args = getopt.getopt(sys.argv[1:], 'erlf:i:p:', ['ip','execute','recive','listen', 'file=', 'i=', 'port='])

        for command,arg in opts:
            if command in ('-f','--file'):
                send_file = True
                file_to_send = arg
            elif command in ('-l','--listen'):listen_mod = True
            elif command in ('-i','--ip'):host = arg
            elif command in ('-p','--port'):port = int(port)
            elif command in ('-r','--recive'):recive_file = True
            elif command in ('-e','--execute'):execute_command = True
            else:
                raise Exception 
        
        if not _exit:
            novo_sock = socket_(host,port)
            if listen_mod:novo_sock.start_listen()
            elif send_file:novo_sock.send_file(file_to_send)
            elif recive_file: novo_sock.recv_file()
            elif execute_command: novo_sock.execute_command()
            else:novo_sock.connect_to_target()

    except KeyboardInterrupt:    
        print("\nEncerrando o servidor...")
        print("Servidor encerrado.")
    
    except getopt.GetoptError as err:
        print(err)

    except Exception as e:
        uso()
        print(e)

main()