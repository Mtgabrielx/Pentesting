from bs4 import BeautifulSoup
import requests
import re
import sys
import getopt
import re

def obter_token(url, name_keyword="token"):
    try:
        # Fazendo a requisição GET para a URL
        response = requests.get(url)
        response.raise_for_status()  # Lança uma exceção para erros HTTP
        
        # Criando um objeto BeautifulSoup para analisar o conteúdo HTML da página
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Encontrando todos os elementos com o atributo 'name' que contenham a palavra-chave
        elements_with_name = soup.find_all(attrs={'name': re.compile(name_keyword)})
        
        # Verificando se algum elemento foi encontrado
        if elements_with_name:
            # Exibindo o valor dos elementos encontrados (se tiverem)
            for element in elements_with_name:
                # Verifica se o elemento possui o atributo 'value'
                if 'value' in element.attrs:
                    print(f"Valor do elemento cujo nome contém '{name_keyword}': {element['value']}")
                    return element['value']
                else:
                    print(f"O elemento cujo nome contém '{name_keyword}' não possui um atributo 'value'.")
                    return None
        else:
            print(f"Nenhum elemento cujo nome contenha '{name_keyword}' encontrado na página.")
    except requests.exceptions.RequestException as e:
        print("Erro ao fazer a requisição:", e)

def dividir_string(string):
    # Define um padrão de expressão regular para encontrar palavras maiúsculas seguidas por $
    padrao = r'\$\b[A-Z]+\b'
    
    # Divide a string com base no padrão de expressão regular
    partes = re.split(padrao, string)
    
    # Remove elementos vazios da lista resultante
    partes = [parte for parte in partes if parte]
    
    return partes

def send_post(url,body,cookies=None):
    
    data = {
    "campo1": "valor1",
    "campo2": "valor2"
    }
    response = requests.post(url, data=data, cookies=cookies)

    # Verificando o resultado da requisição
    if response.status_code == 200:
        print("Requisição bem-sucedida!")
    else:
        print("Erro ao enviar a requisição:", response.status_code)

def http_brute_force(url,body,cookies=None,wordlist='teste.txt'):
    get_token = False
    token=obter_token(url)
    body_split = dividir_string(body)
    body_split = [palavra.replace("=","") for palavra in body_split ]
    print(body_split)
    body_split = [palavra.split("&") for palavra in body_split ]
    print(body_split)
    print(f"token {token}")
    # if token is not None:
    #     get_token = True
    #     with open('r',wordlist) as file:
    #         linhas = file.readlines()
    #         for linha in linhas:
    #             token = obter_token(url)
    #             pass

retorno = dividir_string('Login=Login')
print([letra.split("=") for letra in retorno])
# try:
    # opts,args = getopt.getopt(sys[1:],'u:w:b:c:', ['--url=','--wordlist=','--body=','--cookies'])
    # cookies = None
    # # URL da página da web
    # for a,i in opts:
    #     if a in('-u','--url'):
    #         url = i
    #     elif a in ('-w','--wordlist'):
    #         wordlist = i
    #     elif a in ('-b','--body'):
    #         body = i
    #     elif a in ('-c','--cookies'):
    #         cookies = i
    #     else:
            # raise getopt.GetoptError("Argumentos inválidos")
url = "http://192.168.1.12/dvwa/login.php"
Post_body = "username=$USER&password=$PASS&Login=Login&user_token=$TOKEN"
        # Palavra-chave que você deseja encontrar no atributo "name"

        # Chamada da função para obter o valor do elemento pelo nome
        # if cookies is not None:
            # http_brute_force(url,Post_body,cookies)
# http_brute_force(url,Post_body)
# except:
#     print("Argumentos inválidos")