from collections import deque
import re

def help():
    print("Voce deve passar um funcao como primeiro parâmetro a qual deve retornar true quando o login for bem sucedido e false quando nao")
    print("O payload deve ter ^USER e ^PASS para os espaços do user e password respectivamente")
    print("Voce pode passar como parâmetro o login/password ou então um dicionário para ser usado")

def format(payload):
    fragment = re.split(r'\^USER|\^PASS',payload)
    return fragment

def brute_force(funcao,host,payload,login=None,password=None,dicionario_login=None,dicionario_password=None):
    
    list_login = deque()
    list_passwd = deque()
    loged = False

    if login is not None:
        list_login.append(login)
    
    if password is not None:
        list_passwd.append(password)
    
    if dicionario_login is not None:
        with open(dicionario_login,"r",errors="ignore") as file:
            for linha in file:
                list_login.append(linha)
    
    if dicionario_password is not None:
        with open(dicionario_password,"r",errors="ignore") as file:
            for linha in file:
                list_passwd.append(linha)

    formated_payload = format(payload)
    
    for l in list_login:
        for p in list_passwd:                
            completed_payload = formated_payload[0] + l + formated_payload[1] + p
            if len(formated_payload) > 2:
                completed_payload += formated_payload[2]
            loged = funcao(completed_payload.strip(),host)
            if loged == True: return True
    return False